{
  "_fv": 47,
  "_type": "procedure",
  "definition": {
    "procedurexml": "<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"event_trigger\" deletable=\"false\" x=\"40\" y=\"40\"><field name=\"trigger\">no_ext_trigger</field><next><block type=\"item_animation\"><field name=\"name\">CUSTOM:ShaYingcrc</field><value name=\"item\"><block type=\"entity_iteminhand\"><value name=\"entity\"><block type=\"entity_from_deps\"></block></value></block></value><value name=\"animation\"><block type=\"text\"><field name=\"TEXT\">animation.DesertEagelCRC.Fire</field></block></value><next><block type=\"controls_if\"><value name=\"IF0\"><block type=\"compare_mcitems\"><value name=\"a\"><block type=\"entity_iteminhand\"><value name=\"entity\"><block type=\"entity_from_deps\"></block></value></block></value><value name=\"b\"><block type=\"mcitem_all\"><field name=\"value\">CUSTOM:ShaYingcrc</field></block></value></block></value><statement name=\"DO0\"><block type=\"item_cooldown_for\"><value name=\"entity\"><block type=\"entity_from_deps\"></block></value><value name=\"item\"><block type=\"entity_iteminhand\"><value name=\"entity\"><block type=\"entity_from_deps\"></block></value></block></value><value name=\"ticks\"><block type=\"math_number\"><field name=\"NUM\">8</field></block></value><next><block type=\"java_code\"><field name=\"CODE\">double[] recoilTimer = {0}; // 后坐力计时器&amp;#10;\t\t\tdouble totalTime = 100;&amp;#10;\t\t\tint sleepTime = 2;&amp;#10;\t\t\tdouble recoilDuration = totalTime / sleepTime; // 后坐力持续时间&amp;#10;\t\t\tfloat speed = (float) ((Math.random() * 2) - 1) / 10;&amp;#10;\t\t\t// 使用匿名内部类实现 Runnable 接口&amp;#10;\t\t\tRunnable recoilRunnable = () -&gt; {&amp;#10;\t\t\t\twhile (recoilTimer[0] &lt; recoilDuration) {&amp;#10;\t\t\t\t\t// 逐渐调整玩家的视角&amp;#10;\t\t\t\t\tfloat newPitch = entity.getXRot() - (float) 0.2;//实时获取，以防鼠标冲突&amp;#10;\t\t\t\t\tfloat newYaw = entity.getYRot() - speed;&amp;#10;\t\t\t\t\tentity.setYRot(newYaw);&amp;#10;\t\t\t\t\tentity.setXRot(newPitch);&amp;#10;\t\t\t\t\tentity.yRotO = entity.getYRot();&amp;#10;\t\t\t\t\tentity.xRotO = entity.getXRot();&amp;#10;\t\t\t\t\trecoilTimer[0]++; // 计时器递增&amp;#10;\t\t\t\t\ttry {&amp;#10;\t\t\t\t\t\tThread.sleep(sleepTime); // 每次暂停20毫秒，模拟玩家的视角变化&amp;#10;\t\t\t\t\t} catch (InterruptedException e) {&amp;#10;\t\t\t\t\t\te.printStackTrace();&amp;#10;\t\t\t\t\t}&amp;#10;\t\t\t\t}&amp;#10;\t\t\t\twhile (recoilTimer[0] &gt; 0) {&amp;#10;\t\t\t\t\tfloat newPitch = entity.getXRot() + (float) 0.2;&amp;#10;\t\t\t\t\tfloat newYaw = entity.getYRot() + speed;&amp;#10;\t\t\t\t\tentity.setXRot(newPitch);&amp;#10;\t\t\t\t\tentity.setYRot(newYaw);&amp;#10;\t\t\t\t\tentity.xRotO = entity.getXRot();&amp;#10;\t\t\t\t\tentity.yRotO = entity.getYRot();&amp;#10;\t\t\t\t\trecoilTimer[0]--; // 计时器递增&amp;#10;\t\t\t\t\ttry {&amp;#10;\t\t\t\t\t\tThread.sleep(sleepTime); // 每次暂停20毫秒，模拟玩家的视角变化&amp;#10;\t\t\t\t\t} catch (InterruptedException e) {&amp;#10;\t\t\t\t\t\te.printStackTrace();&amp;#10;\t\t\t\t\t}&amp;#10;\t\t\t\t}&amp;#10;\t\t\t};&amp;#10;\t\t\tThread recoilThread = new Thread(recoilRunnable); // 创建线程对象&amp;#10;\t\t\trecoilThread.start(); // 启动线程</field></block></next></block></statement></block></next></block></next></block></xml>"
  }
}